@startuml

' You can paste this content into https://plantuml-editor.kkeisuke.com/ to generate the PNG
skinparam dpi 150

actor email_alert_service as "email-alert-service"
participant controller as "ContentChangeController"
database content_change as "ContentChange"
participant process_content_change_worker as "ProcessContentChangeWorker"
participant subscription_matcher as "SubscriptionMatcher"
database subscription_content as "SubscriptionContent"
participant email_generation_worker as "EmailGenerationWorker"
control digest_timer as "DigestTimer"
database email as "Email"
participant email_renderer as "EmailRenderer"
participant delivery_request_worker as "DeliveryRequestWorker"
database delivery_attempt as "DeliveryAttempt"
participant status_update_service as "StatusUpdateService"
participant status_updates_controller as "StatusUpdatesController"
participant govuk_notify as "GOV.UK Notify" #orange

email_alert_service -> controller : POST /create
controller -> content_change : create
content_change -> controller : id
controller -> process_content_change_worker : enqueue with id
controller -> email_alert_service : acknowledge

group sidekiq
  process_content_change_worker -> content_change : find by id
  content_change -> process_content_change_worker : instance
  process_content_change_worker -> subscription_matcher : content_change
  subscription_matcher -> subscription_matcher : ... existing logic
  subscription_matcher -> process_content_change_worker : subscriptions
  process_content_change_worker -> subscription_content : create with subscription, content_change
  process_content_change_worker -> email_generation_worker : enqueue with 'immediate'
  process_content_change_worker -> content_change : set processed_at and save
end group

group daily timer
  digest_timer -> email_generation_worker : enqueue with 'daily'
end

group weekly timer
  digest_timer -> email_generation_worker : enqueue with 'weekly'
end

group sidekiq
  email_generation_worker -> subscription_content : find all by frequency, email_id=nil
  subscription_content -> email_generation_worker : instances
  email_generation_worker -> email_generation_worker : group by subscription
  email_generation_worker -> email : build with subscription_content
  email -> email_generation_worker : instance
  email_generation_worker -> email_renderer : email
  email_renderer -> email_generation_worker : subject, body
  email_generation_worker -> email : set subject, body
  email_generation_worker -> email : set recipient and save
  email -> subscription_content : (active record automatically sets email_id)
  email -> email_generation_worker : id
  email_generation_worker -> delivery_request_worker : enqueue with id
  email_generation_worker -> subscription_content : set processed_at and save
end

group sidekiq
  delivery_request_worker -> email : find by id
  email -> delivery_request_worker : instance
  delivery_request_worker -> delivery_attempt : create with email, state=ready_to_send
  delivery_attempt -> delivery_request_worker : instance
  delivery_request_worker -> govuk_notify : request to deliver email
  delivery_request_worker -> delivery_attempt : set state=sending and save
  delivery_request_worker -> email : set processed_at and save
end group

group callback
  delivery_attempt -> status_update_service : instance
  govuk_notify -> status_updates_controller : status
  status_updates_controller -> status_update_service : status

  group if success
    status_update_service -> delivery_attempt : set success
    status_update_service -> delivery_attempt : save
  end group

  group if failed
    status_update_service -> delivery_attempt : set failed, error message
    status_update_service -> delivery_attempt : save
    status_update_service -> delivery_attempt : find others for email
    delivery_attempt -> status_update_service : instances
    status_update_service -> status_update_service : ... decide what to do\ne.g. retry in an hour\ne.g. blacklist subscriber
  end group
end group

@enduml
